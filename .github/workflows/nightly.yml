name: (dev) Release Workflow

# RELEASE PROCESS
# 
# NOTE: we assume the version in the source code is the release version

env:
  RELEASE_COMMIT: ${{ github.sha }}
  VERSION_FILE: "python-client/src/aws_ctk/version.py"
  GO_VERSION: "1.20"

on:
  push:
    branches:
      - "dev-release-pipeline"
    # paths:
    #   - ${{ env.VERSION_FILE }}

# concurrency:
  # group: ${{ github.ref }}
  # cancel-in-progress: true
    
jobs:
  # This job bumps the package version to the release version
  # creates an integrity hash from the source code
  # uploads the artifact with the integrity hash as the key name
  # so subsequent jobs can restore from a trusted point in time to prevent tampering
  seal:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      integrity_hash: ${{ steps.seal_source_code.outputs.integrity_hash }}
      artifact_name: ${{ steps.seal_source_code.outputs.artifact_name }}
      RELEASE_VERSION: ${{ steps.release_version.outputs.RELEASE_VERSION }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
        with:
          ref: ${{ env.RELEASE_COMMIT }}

      - name: Export release version
        id: release_version
        # transform tag format `v<version` to `<version>`
        run: |
          RELEASE_VERSION=$(awk -F '"' '/_version = /{print $2}' ${{ env.VERSION_FILE }})
          echo $RELEASE_VERSION
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> "$GITHUB_OUTPUT"
      
      - name: Seal and upload
        id: seal_source_code
        uses: ./.github/actions/seal
        with:
          artifact_name_prefix: "source"

  quality-check:
    needs: [seal]
    uses: ./.github/workflows/quality-check.yml
    with:
      ref: ${{ github.sha }} # cannot use env
    secrets:
      CI_IAM_ROLE_ARN: ${{ secrets.CI_IAM_ROLE_ARN }}

  build-python-client:
    needs: [quality-check]
    uses: ./.github/workflows/release-python-client.yml
    with:
      ref: ${{ github.sha }} # cannot use env
      artifact_name: "python-client-artifacts"

  # TODO: uncomment provenance job once repo is public
  # create provenance file
  # This job creates a provenance file that describes how our release was built (all steps)
  # after it verifies our build is reproducible within the same pipeline
  # it confirms that its own software and the CI build haven't been tampered with (Trust but verify)
  # lastly, it creates and sign an attestation (multiple.intoto.jsonl) that confirms
  # this build artifact came from this GitHub org, branch, actor, commit ID, inputs that triggered this pipeline, and matches its integrity hash
  # NOTE: supply chain threats review (we protect against all of them now): https://slsa.dev/spec/v1.0/threats-overview
  # provenance:
  #   needs: [collect]
  #   permissions:
  #     contents: write # nested job explicitly require despite upload assets being set to false
  #     actions: read # To read the workflow path.
  #     id-token: write # To sign the provenance.
  #   # NOTE: provenance fails if we use action pinning... it's a Github limitation
  #   # because SLSA needs to trace & attest it came from a given branch; pinning doesn't expose that information
  #   # https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/generic/README.md#referencing-the-slsa-generator
  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
  #   with:
  #     base64-subjects: ${{ needs.collect.outputs.attestation_hashes }}
  #     upload-assets: false  # we upload its attestation in create_tag job, otherwise it creates a new release

  # publish to pypi
  release-python-client:
    needs: [collect-python-client] # TODO: change to [provenance] once repo is public
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: python-client-artifacts
          path: ./

      - run: ls -la ./

  # create tag
