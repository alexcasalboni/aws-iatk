name: (dev) Release Workflow

# RELEASE PROCESS
# 
# NOTE: we assume the version in the source code is the release version

env:
  RELEASE_COMMIT: ${{ github.sha }}
  VERSION_FILE: "python-client/src/aws_ctk/version.py"
  GO_VERSION: "1.20"

on:
  push:
    branches:
      - "dev-release-pipeline"
    # paths:
    #   - ${{ env.VERSION_FILE }}

# concurrency:
  # group: ${{ github.ref }}
  # cancel-in-progress: true
    
jobs:
  # This job bumps the package version to the release version
  # creates an integrity hash from the source code
  # uploads the artifact with the integrity hash as the key name
  # so subsequent jobs can restore from a trusted point in time to prevent tampering
  seal:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      integrity_hash: ${{ steps.seal_source_code.outputs.integrity_hash }}
      artifact_name: ${{ steps.seal_source_code.outputs.artifact_name }}
      RELEASE_VERSION: ${{ steps.release_version.outputs.RELEASE_VERSION }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
        with:
          ref: ${{ env.RELEASE_COMMIT }}

      - name: Export release version
        id: release_version
        # transform tag format `v<version` to `<version>`
        run: |
          RELEASE_VERSION=$(awk -F '"' '/_version = /{print $2}' ${{ env.VERSION_FILE }})
          echo $RELEASE_VERSION
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> "$GITHUB_OUTPUT"
      
      - name: Seal and upload
        id: seal_source_code
        uses: ./.github/actions/seal
        with:
          artifact_name_prefix: "source"

  quality-check:
    needs: [seal]
    uses: ./.github/workflows/quality-check.yml
    with:
      ref: ${{ github.sha }} # cannot use env
    secrets:
      CI_IAM_ROLE_ARN: ${{ secrets.CI_IAM_ROLE_ARN }}

  release-python-client:
    needs: [quality-check]
    uses: ./.github/workflows/release-python-client.yml
    with:
      ref: ${{ github.sha }} # cannot use env
      artifact_name: "python-client-artifacts"
      skip_pypi: true

  # create tag
  create-tag:
    needs: [seal, release-python-client]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
        with:
          ref: ${{ env.RELEASE_COMMIT }}

      - name: Git client setup and refresh tip
        id: setup-git
        run: |
          git config user.name "AWS CTK bot"
          git config user.email "aws-ctk-feedback@amazon.com"
          git config remote.origin.url >&-

      - name: Create Git Tag and draft release
        env:
          RELEASE_VERSION: ${{ needs.seal.outputs.RELEASE_VERSION }}
        run: |
          git tag -a v"${RELEASE_VERSION}" -m "release_version: v${RELEASE_VERSION}"
          git push origin v"${RELEASE_VERSION}"
          gh release create v"${RELEASE_VERSION}" --draft --generate-notes --title "Release version: v${RELEASE_VERSION}"

      - name: Upload provenance
        id: upload-provenance
        uses: ./.github/actions/upload-release-provenance
        with:
          release_version: ${{ needs.seal.outputs.RELEASE_VERSION }}
          provenance_name: ${{ needs.release-python-client.outputs.provenance_name }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

