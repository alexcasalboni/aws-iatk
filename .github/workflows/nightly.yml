name: (dev) Release Workflow

# RELEASE PROCESS
# 
# NOTE: we assume the version in the source code is the release version

env:
  RELEASE_COMMIT: ${{ github.sha }}
  VERSION_FILE: "python-client/src/aws_ctk/version.py"
  GO_VERSION: "1.20"

on:
  push:
    branches:
      - "dev-release-pipeline"
    # paths:
    #   - ${{ env.VERSION_FILE }}

# concurrency:
  # group: ${{ github.ref }}
  # cancel-in-progress: true
    
jobs:
  # This job bumps the package version to the release version
  # creates an integrity hash from the source code
  # uploads the artifact with the integrity hash as the key name
  # so subsequent jobs can restore from a trusted point in time to prevent tampering
  seal:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      integrity_hash: ${{ steps.seal_source_code.outputs.integrity_hash }}
      artifact_name: ${{ steps.seal_source_code.outputs.artifact_name }}
      RELEASE_VERSION: ${{ steps.release_version.outputs.RELEASE_VERSION }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
        with:
          ref: ${{ env.RELEASE_COMMIT }}

      - name: Export release version
        id: release_version
        # transform tag format `v<version` to `<version>`
        run: |
          RELEASE_VERSION=$(awk -F '"' '/_version = /{print $2}' ${{ env.VERSION_FILE }})
          echo $RELEASE_VERSION
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> "$GITHUB_OUTPUT"
      
      - name: Seal and upload
        id: seal_source_code
        uses: ./.github/actions/seal
        with:
          artifact_name_prefix: "source"

  # quality-check:
  #   needs: [seal]
  #   uses: ./.github/workflows/quality-check.yml
  #   with:
  #     ref: ${{ github.sha }} # cannot use env
  #   secrets:
  #     CI_IAM_ROLE_ARN: ${{ secrets.CI_IAM_ROLE_ARN }}

  build-binary:
    name: "Build CTK Binary ${{ matrix.os }} / ${{ matrix.GOARCH }}"
    # needs: [quality-check]
    permissions:
      contents: read
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        GOARCH: [amd64, arm64]
        include:
          - os: macos-latest
            GOOS: darwin
          - os: windows-latest
            GOOS: windows
          - os: ubuntu-latest
            GOOS: linux
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
        with:
          ref: ${{ env.RELEASE_COMMIT }}

      - name: build binary
        run: make build

      - name: Upload artifacts
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          if-no-files-found: error
          name: ctk_${{ matrix.os }}_${{ matrix.GOARCH }}
          path: ./bin/ctk
          retention-days: 1

  build-python-client:
    name: "Build Python Client (${{ matrix.os }} / ${{ matrix.arch }})"
    needs: [build-binary]
    permissions:
      contents: read
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            arch: amd64 
            CIBW_ARCHS: x86_64
          - os: macos-latest
            arch: arm64 
            CIBW_ARCHS: arm64
          - os: windows-latest
            arch: amd64 
            CIBW_ARCHS: AMD64
          - os: windows-latest
            arch: arm64 
            CIBW_ARCHS: ARM64
          - os: ubuntu-latest
            arch: amd64 
            CIBW_ARCHS: x86_64
          - os: ubuntu-latest
            arch: arm64 
            CIBW_ARCHS: aarch64
    steps:
      # checkout
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
        with:
          ref: ${{ env.RELEASE_COMMIT }}

      # for building binary
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      # Used to host cibuildwheel
      - uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4.7.1
        with:
          python-version: "3.8"

      - name: Install cibuildwheel
        run: |
          python -m pip install build
          python -m pip install cibuildwheel

      - name: Set up QEMU
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64' }}
        uses: docker/setup-qemu-action@326560df218a7ea9cf6ab49bbc88b8b306bb437e
        with:
          platforms: arm64

      - name: copy go source codebase
        working-directory: ./python-client
        run: make copy-service-source-for-sdist

      - name: Build wheels
        working-directory: "python-client"
        env:
          CIBW_BUILD_FRONTEND: build
          # CIBW_ENVIRONMENT_PASS_LINUX: CTK_SKIP_BUILD_BINARY
          CIBW_SKIP: "*-musllinux*"
          CIBW_ARCHS: ${{ matrix.CIBW_ARCHS }}
          CIBW_ENVIRONMENT_LINUX: GOARCH="${{ matrix.arch }}" CTK_SKIP_BUILD_BINARY="1"
          CIBW_BEFORE_ALL_LINUX: |
            curl -O -L "https://golang.org/dl/go1.21.1.linux-amd64.tar.gz" && 
            tar -C /usr/local -xzf go1.21.1.linux-amd64.tar.gz && 
            export PATH=$PATH:/usr/local/go/bin && 
            env GOOS=linux GOARCH=${{ matrix.arch }} go build -C ./src/ctk_src -o ../ctk_service/ ./cmd/ctk
        run: python -m cibuildwheel --output-dir dist

      - uses: actions/upload-artifact@v3
        with:
          name: wheels-test-artifact
          path: ./python-client/dist/*.whl
        


      # download binary

      # copy binary to python

      # cibuildwheel
      